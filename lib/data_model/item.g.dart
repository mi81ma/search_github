// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'item.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$_Item _$$_ItemFromJson(Map<String, dynamic> json) => _$_Item(
      id: json['id'] as int?,
      nodeId: json['nodeId'] as String?,
      name: json['name'] as String?,
      fullName: json['fullName'] as String?,
      private: json['private'] as bool?,
      owner: Owner.fromJson(json['owner'] as Map<String, dynamic>),
      htmlUrl: json['htmlUrl'] as String?,
      description: json['description'] as String?,
      fork: json['fork'] as bool?,
      url: json['url'] as String?,
      forksUrl: json['forksUrl'] as String?,
      keysUrl: json['keysUrl'] as String?,
      collaboratorsUrl: json['collaboratorsUrl'] as String?,
      teamsUrl: json['teamsUrl'] as String?,
      hooksUrl: json['hooksUrl'] as String?,
      issueEventsUrl: json['issueEventsUrl'] as String?,
      eventsUrl: json['eventsUrl'] as String?,
      assigneesUrl: json['assigneesUrl'] as String?,
      branchesUrl: json['branchesUrl'] as String?,
      tagsUrl: json['tagsUrl'] as String?,
      blobsUrl: json['blobsUrl'] as String?,
      gitTagsUrl: json['gitTagsUrl'] as String?,
      gitRefsUrl: json['gitRefsUrl'] as String?,
      treesUrl: json['treesUrl'] as String?,
      statusesUrl: json['statusesUrl'] as String?,
      languagesUrl: json['languagesUrl'] as String?,
      stargazersUrl: json['stargazersUrl'] as String?,
      contributorsUrl: json['contributorsUrl'] as String?,
      subscribersUrl: json['subscribersUrl'] as String?,
      subscriptionUrl: json['subscriptionUrl'] as String?,
      commitsUrl: json['commitsUrl'] as String?,
      gitCommitsUrl: json['gitCommitsUrl'] as String?,
      commentsUrl: json['commentsUrl'] as String?,
      issueCommentUrl: json['issueCommentUrl'] as String?,
      contentsUrl: json['contentsUrl'] as String?,
      compareUrl: json['compareUrl'] as String?,
      mergesUrl: json['mergesUrl'] as String?,
      archiveUrl: json['archiveUrl'] as String?,
      downloadsUrl: json['downloadsUrl'] as String?,
      issuesUrl: json['issuesUrl'] as String?,
      pullsUrl: json['pullsUrl'] as String?,
      milestonesUrl: json['milestonesUrl'] as String?,
      notificationsUrl: json['notificationsUrl'] as String?,
      labelsUrl: json['labelsUrl'] as String?,
      releasesUrl: json['releasesUrl'] as String?,
      deploymentsUrl: json['deploymentsUrl'] as String?,
      createdAt: json['createdAt'] == null
          ? null
          : DateTime.parse(json['createdAt'] as String),
      updatedAt: json['updatedAt'] == null
          ? null
          : DateTime.parse(json['updatedAt'] as String),
      pushedAt: json['pushedAt'] == null
          ? null
          : DateTime.parse(json['pushedAt'] as String),
      gitUrl: json['gitUrl'] as String?,
      sshUrl: json['sshUrl'] as String?,
      cloneUrl: json['cloneUrl'] as String?,
      svnUrl: json['svnUrl'] as String?,
      homepage: json['homepage'] as String?,
      size: json['size'] as int?,
      stargazersCount: json['stargazersCount'] as int?,
      watchersCount: json['watchersCount'] as int?,
      language: json['language'] as String?,
      hasIssues: json['hasIssues'] as bool?,
      hasProjects: json['hasProjects'] as bool?,
      hasDownloads: json['hasDownloads'] as bool?,
      hasWiki: json['hasWiki'] as bool?,
      hasPages: json['hasPages'] as bool?,
      hasDiscussions: json['hasDiscussions'] as bool?,
      forksCount: json['forksCount'] as int?,
      mirrorUrl: json['mirrorUrl'] as String?,
      archived: json['archived'] as bool?,
      disabled: json['disabled'] as bool?,
      openIssuesCount: json['openIssuesCount'] as int?,
      license: json['license'] == null
          ? null
          : License.fromJson(Map<String, String?>.from(json['license'] as Map)),
      allowForking: json['allowForking'] as bool?,
      isTemplate: json['isTemplate'] as bool?,
      webCommitSignoffRequired: json['webCommitSignoffRequired'] as bool?,
      topics:
          (json['topics'] as List<dynamic>?)?.map((e) => e as String).toList(),
      visibility: json['visibility'] as String?,
      forks: json['forks'] as int?,
      openIssues: json['openIssues'] as int?,
      watchers: json['watchers'] as int?,
      defaultBranch: json['defaultBranch'] as String?,
      score: json['score'] as int?,
    );

Map<String, dynamic> _$$_ItemToJson(_$_Item instance) => <String, dynamic>{
      'id': instance.id,
      'nodeId': instance.nodeId,
      'name': instance.name,
      'fullName': instance.fullName,
      'private': instance.private,
      'owner': instance.owner,
      'htmlUrl': instance.htmlUrl,
      'description': instance.description,
      'fork': instance.fork,
      'url': instance.url,
      'forksUrl': instance.forksUrl,
      'keysUrl': instance.keysUrl,
      'collaboratorsUrl': instance.collaboratorsUrl,
      'teamsUrl': instance.teamsUrl,
      'hooksUrl': instance.hooksUrl,
      'issueEventsUrl': instance.issueEventsUrl,
      'eventsUrl': instance.eventsUrl,
      'assigneesUrl': instance.assigneesUrl,
      'branchesUrl': instance.branchesUrl,
      'tagsUrl': instance.tagsUrl,
      'blobsUrl': instance.blobsUrl,
      'gitTagsUrl': instance.gitTagsUrl,
      'gitRefsUrl': instance.gitRefsUrl,
      'treesUrl': instance.treesUrl,
      'statusesUrl': instance.statusesUrl,
      'languagesUrl': instance.languagesUrl,
      'stargazersUrl': instance.stargazersUrl,
      'contributorsUrl': instance.contributorsUrl,
      'subscribersUrl': instance.subscribersUrl,
      'subscriptionUrl': instance.subscriptionUrl,
      'commitsUrl': instance.commitsUrl,
      'gitCommitsUrl': instance.gitCommitsUrl,
      'commentsUrl': instance.commentsUrl,
      'issueCommentUrl': instance.issueCommentUrl,
      'contentsUrl': instance.contentsUrl,
      'compareUrl': instance.compareUrl,
      'mergesUrl': instance.mergesUrl,
      'archiveUrl': instance.archiveUrl,
      'downloadsUrl': instance.downloadsUrl,
      'issuesUrl': instance.issuesUrl,
      'pullsUrl': instance.pullsUrl,
      'milestonesUrl': instance.milestonesUrl,
      'notificationsUrl': instance.notificationsUrl,
      'labelsUrl': instance.labelsUrl,
      'releasesUrl': instance.releasesUrl,
      'deploymentsUrl': instance.deploymentsUrl,
      'createdAt': instance.createdAt?.toIso8601String(),
      'updatedAt': instance.updatedAt?.toIso8601String(),
      'pushedAt': instance.pushedAt?.toIso8601String(),
      'gitUrl': instance.gitUrl,
      'sshUrl': instance.sshUrl,
      'cloneUrl': instance.cloneUrl,
      'svnUrl': instance.svnUrl,
      'homepage': instance.homepage,
      'size': instance.size,
      'stargazersCount': instance.stargazersCount,
      'watchersCount': instance.watchersCount,
      'language': instance.language,
      'hasIssues': instance.hasIssues,
      'hasProjects': instance.hasProjects,
      'hasDownloads': instance.hasDownloads,
      'hasWiki': instance.hasWiki,
      'hasPages': instance.hasPages,
      'hasDiscussions': instance.hasDiscussions,
      'forksCount': instance.forksCount,
      'mirrorUrl': instance.mirrorUrl,
      'archived': instance.archived,
      'disabled': instance.disabled,
      'openIssuesCount': instance.openIssuesCount,
      'license': instance.license,
      'allowForking': instance.allowForking,
      'isTemplate': instance.isTemplate,
      'webCommitSignoffRequired': instance.webCommitSignoffRequired,
      'topics': instance.topics,
      'visibility': instance.visibility,
      'forks': instance.forks,
      'openIssues': instance.openIssues,
      'watchers': instance.watchers,
      'defaultBranch': instance.defaultBranch,
      'score': instance.score,
    };
